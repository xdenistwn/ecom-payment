// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/payment/repository/kafka.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentEventPublisher is a mock of PaymentEventPublisher interface.
type MockPaymentEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentEventPublisherMockRecorder
}

// MockPaymentEventPublisherMockRecorder is the mock recorder for MockPaymentEventPublisher.
type MockPaymentEventPublisherMockRecorder struct {
	mock *MockPaymentEventPublisher
}

// NewMockPaymentEventPublisher creates a new mock instance.
func NewMockPaymentEventPublisher(ctrl *gomock.Controller) *MockPaymentEventPublisher {
	mock := &MockPaymentEventPublisher{ctrl: ctrl}
	mock.recorder = &MockPaymentEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentEventPublisher) EXPECT() *MockPaymentEventPublisherMockRecorder {
	return m.recorder
}

// PublishPaymentSuccess mocks base method.
func (m *MockPaymentEventPublisher) PublishPaymentSuccess(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPaymentSuccess", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPaymentSuccess indicates an expected call of PublishPaymentSuccess.
func (mr *MockPaymentEventPublisherMockRecorder) PublishPaymentSuccess(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPaymentSuccess", reflect.TypeOf((*MockPaymentEventPublisher)(nil).PublishPaymentSuccess), ctx, orderID)
}
