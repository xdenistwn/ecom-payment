// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/payment/repository/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "payment/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentDatabase is a mock of PaymentDatabase interface.
type MockPaymentDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentDatabaseMockRecorder
}

// MockPaymentDatabaseMockRecorder is the mock recorder for MockPaymentDatabase.
type MockPaymentDatabaseMockRecorder struct {
	mock *MockPaymentDatabase
}

// NewMockPaymentDatabase creates a new mock instance.
func NewMockPaymentDatabase(ctrl *gomock.Controller) *MockPaymentDatabase {
	mock := &MockPaymentDatabase{ctrl: ctrl}
	mock.recorder = &MockPaymentDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentDatabase) EXPECT() *MockPaymentDatabaseMockRecorder {
	return m.recorder
}

// CheckPaymentAmountByOrderID mocks base method.
func (m *MockPaymentDatabase) CheckPaymentAmountByOrderID(ctx context.Context, orderID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPaymentAmountByOrderID", ctx, orderID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPaymentAmountByOrderID indicates an expected call of CheckPaymentAmountByOrderID.
func (mr *MockPaymentDatabaseMockRecorder) CheckPaymentAmountByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPaymentAmountByOrderID", reflect.TypeOf((*MockPaymentDatabase)(nil).CheckPaymentAmountByOrderID), ctx, orderID)
}

// GetExpiredPendingPayments mocks base method.
func (m *MockPaymentDatabase) GetExpiredPendingPayments(ctx context.Context) ([]models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredPendingPayments", ctx)
	ret0, _ := ret[0].([]models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredPendingPayments indicates an expected call of GetExpiredPendingPayments.
func (mr *MockPaymentDatabaseMockRecorder) GetExpiredPendingPayments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredPendingPayments", reflect.TypeOf((*MockPaymentDatabase)(nil).GetExpiredPendingPayments), ctx)
}

// GetFailedPaymentRequests mocks base method.
func (m *MockPaymentDatabase) GetFailedPaymentRequests(ctx context.Context, paymentRequests *[]models.PaymentRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedPaymentRequests", ctx, paymentRequests)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFailedPaymentRequests indicates an expected call of GetFailedPaymentRequests.
func (mr *MockPaymentDatabaseMockRecorder) GetFailedPaymentRequests(ctx, paymentRequests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedPaymentRequests", reflect.TypeOf((*MockPaymentDatabase)(nil).GetFailedPaymentRequests), ctx, paymentRequests)
}

// GetPaymentInfoByOrderID mocks base method.
func (m *MockPaymentDatabase) GetPaymentInfoByOrderID(ctx context.Context, orderID int64) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentInfoByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentInfoByOrderID indicates an expected call of GetPaymentInfoByOrderID.
func (mr *MockPaymentDatabaseMockRecorder) GetPaymentInfoByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentInfoByOrderID", reflect.TypeOf((*MockPaymentDatabase)(nil).GetPaymentInfoByOrderID), ctx, orderID)
}

// GetPendingInvoices mocks base method.
func (m *MockPaymentDatabase) GetPendingInvoices(ctx context.Context) ([]models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInvoices", ctx)
	ret0, _ := ret[0].([]models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInvoices indicates an expected call of GetPendingInvoices.
func (mr *MockPaymentDatabaseMockRecorder) GetPendingInvoices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInvoices", reflect.TypeOf((*MockPaymentDatabase)(nil).GetPendingInvoices), ctx)
}

// GetPendingPaymentRequests mocks base method.
func (m *MockPaymentDatabase) GetPendingPaymentRequests(ctx context.Context, paymentRequests *[]models.PaymentRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingPaymentRequests", ctx, paymentRequests)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPendingPaymentRequests indicates an expected call of GetPendingPaymentRequests.
func (mr *MockPaymentDatabaseMockRecorder) GetPendingPaymentRequests(ctx, paymentRequests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingPaymentRequests", reflect.TypeOf((*MockPaymentDatabase)(nil).GetPendingPaymentRequests), ctx, paymentRequests)
}

// InsertAuditLog mocks base method.
func (m *MockPaymentDatabase) InsertAuditLog(ctx context.Context, param models.PaymentAuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAuditLog", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAuditLog indicates an expected call of InsertAuditLog.
func (mr *MockPaymentDatabaseMockRecorder) InsertAuditLog(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuditLog", reflect.TypeOf((*MockPaymentDatabase)(nil).InsertAuditLog), ctx, param)
}

// IsAlreadyPaid mocks base method.
func (m *MockPaymentDatabase) IsAlreadyPaid(ctx context.Context, orderID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlreadyPaid", ctx, orderID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlreadyPaid indicates an expected call of IsAlreadyPaid.
func (mr *MockPaymentDatabaseMockRecorder) IsAlreadyPaid(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyPaid", reflect.TypeOf((*MockPaymentDatabase)(nil).IsAlreadyPaid), ctx, orderID)
}

// MarkExpired mocks base method.
func (m *MockPaymentDatabase) MarkExpired(ctx context.Context, paymentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkExpired", ctx, paymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkExpired indicates an expected call of MarkExpired.
func (mr *MockPaymentDatabaseMockRecorder) MarkExpired(ctx, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkExpired", reflect.TypeOf((*MockPaymentDatabase)(nil).MarkExpired), ctx, paymentID)
}

// MarkPaid mocks base method.
func (m *MockPaymentDatabase) MarkPaid(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPaid", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkPaid indicates an expected call of MarkPaid.
func (mr *MockPaymentDatabaseMockRecorder) MarkPaid(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPaid", reflect.TypeOf((*MockPaymentDatabase)(nil).MarkPaid), ctx, orderID)
}

// SaveFailedPublishEvent mocks base method.
func (m *MockPaymentDatabase) SaveFailedPublishEvent(ctx context.Context, param models.FailedEvents) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFailedPublishEvent", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFailedPublishEvent indicates an expected call of SaveFailedPublishEvent.
func (mr *MockPaymentDatabaseMockRecorder) SaveFailedPublishEvent(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFailedPublishEvent", reflect.TypeOf((*MockPaymentDatabase)(nil).SaveFailedPublishEvent), ctx, param)
}

// SavePayment mocks base method.
func (m *MockPaymentDatabase) SavePayment(ctx context.Context, param models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePayment", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePayment indicates an expected call of SavePayment.
func (mr *MockPaymentDatabaseMockRecorder) SavePayment(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePayment", reflect.TypeOf((*MockPaymentDatabase)(nil).SavePayment), ctx, param)
}

// SavePaymentAnomaly mocks base method.
func (m *MockPaymentDatabase) SavePaymentAnomaly(ctx context.Context, param models.PaymentAnomaly) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePaymentAnomaly", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePaymentAnomaly indicates an expected call of SavePaymentAnomaly.
func (mr *MockPaymentDatabaseMockRecorder) SavePaymentAnomaly(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePaymentAnomaly", reflect.TypeOf((*MockPaymentDatabase)(nil).SavePaymentAnomaly), ctx, param)
}

// SavePaymentRequest mocks base method.
func (m *MockPaymentDatabase) SavePaymentRequest(ctx context.Context, param models.PaymentRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePaymentRequest", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePaymentRequest indicates an expected call of SavePaymentRequest.
func (mr *MockPaymentDatabaseMockRecorder) SavePaymentRequest(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePaymentRequest", reflect.TypeOf((*MockPaymentDatabase)(nil).SavePaymentRequest), ctx, param)
}

// UpdateFailedPaymentRequest mocks base method.
func (m *MockPaymentDatabase) UpdateFailedPaymentRequest(ctx context.Context, paymentRequestID int64, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFailedPaymentRequest", ctx, paymentRequestID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFailedPaymentRequest indicates an expected call of UpdateFailedPaymentRequest.
func (mr *MockPaymentDatabaseMockRecorder) UpdateFailedPaymentRequest(ctx, paymentRequestID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailedPaymentRequest", reflect.TypeOf((*MockPaymentDatabase)(nil).UpdateFailedPaymentRequest), ctx, paymentRequestID, notes)
}

// UpdatePendingPaymentRequest mocks base method.
func (m *MockPaymentDatabase) UpdatePendingPaymentRequest(ctx context.Context, paymentRequestID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePendingPaymentRequest", ctx, paymentRequestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePendingPaymentRequest indicates an expected call of UpdatePendingPaymentRequest.
func (mr *MockPaymentDatabaseMockRecorder) UpdatePendingPaymentRequest(ctx, paymentRequestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePendingPaymentRequest", reflect.TypeOf((*MockPaymentDatabase)(nil).UpdatePendingPaymentRequest), ctx, paymentRequestID)
}

// UpdateSuccessPaymentRequest mocks base method.
func (m *MockPaymentDatabase) UpdateSuccessPaymentRequest(ctx context.Context, paymentRequestID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSuccessPaymentRequest", ctx, paymentRequestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSuccessPaymentRequest indicates an expected call of UpdateSuccessPaymentRequest.
func (mr *MockPaymentDatabaseMockRecorder) UpdateSuccessPaymentRequest(ctx, paymentRequestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuccessPaymentRequest", reflect.TypeOf((*MockPaymentDatabase)(nil).UpdateSuccessPaymentRequest), ctx, paymentRequestID)
}
